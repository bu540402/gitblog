<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Learning4Fun]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-05-19T03:00:26.220Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Bu Guochao]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[linux基础-常用命令]]></title>
    <link href="http://yoursite.com/2016/05/18/linux%E5%9F%BA%E7%A1%80-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/05/18/linux基础-常用命令/</id>
    <published>2016-05-18T00:54:12.000Z</published>
    <updated>2016-05-19T03:00:26.220Z</updated>
    <content type="html"><![CDATA[<h2 id="帮助类命令">帮助类命令</h2><ol>
<li>info：列出命令的详细信息</li>
<li>whatis: 列出命令的简要用途说明</li>
<li>man：（待补充）</li>
</ol>
<h2 id="文件操作类命令">文件操作类命令</h2><ol>
<li><p>mkdir : 创建目录</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">mkdir</span> -p <span class="keyword">test</span>/subTest #如果<span class="keyword">test</span>是不存在的，自动创建<span class="keyword">test</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>rm : 删除文件或目录</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rm</span> <span class="keyword">test</span>.txt #删除文件</span><br><span class="line"><span class="keyword">rm</span> -r <span class="keyword">test</span>  #删除目录</span><br><span class="line"><span class="keyword">rm</span> -f <span class="keyword">test</span>.txt #强制删除，不给提示</span><br></pre></td></tr></table></figure>
</li>
<li><p>rmdir: 删除空目录</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> <span class="built_in">dir</span> #<span class="built_in">dir</span>必须为空</span><br><span class="line"><span class="built_in">rmdir</span> -p <span class="built_in">dir</span> # 递归的删除<span class="built_in">dir</span>，如果删除<span class="built_in">dir</span>的子目录之后，<span class="built_in">dir</span>为空，则删除<span class="built_in">dir</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>mv ：移动文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv src dir <span class="comment">#可以实现文件重命名</span></span><br><span class="line">mv <span class="operator">-f</span> src dir <span class="comment">#若目标文件已经存在，强制覆盖</span></span><br><span class="line">mv -i src dir <span class="comment">#若目标文件已经存在，提示覆盖</span></span><br><span class="line">mv -u src dir <span class="comment">#若目标文件已经存在，src较新时覆盖</span></span><br><span class="line">mv -t dir src1 src2 <span class="comment">#目标文件在前</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cp ：复制文件</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> srcfile dir <span class="preprocessor">#复制文件到目录下，如目录下有同名文件，则提示是否覆盖</span></span><br><span class="line"><span class="keyword">cp</span> -a dir1 dir2 <span class="preprocessor">#复制目录，若目标目录存在，则源目录复制到目标目录下，也就是说dir1在dir2，若目标目录不存在，则创建目标目录，dir1中的内容在dir2下。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cd : 目录切换</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> dir <span class="comment">#进入到目录</span></span><br><span class="line"><span class="built_in">cd</span> / <span class="comment">#进入根目录</span></span><br><span class="line"><span class="built_in">cd</span> .. <span class="comment">#退到上级目录</span></span><br><span class="line"><span class="built_in">cd</span> ~ <span class="comment">#进入到当前用户目录</span></span><br><span class="line"><span class="built_in">cd</span> - <span class="comment">#返回进入到当前目录之前的目录</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ls : 列出目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls <span class="operator">-a</span> <span class="comment">#列出所有文件，包括隐藏文件</span></span><br><span class="line">ls -t <span class="comment">#按文件修改时间排序</span></span><br><span class="line">ls -S <span class="comment">#根据文件大小排序</span></span><br><span class="line">ls -h <span class="comment">#以容易理解的方式列出文件大小</span></span><br><span class="line">ls -r <span class="comment">#反序</span></span><br><span class="line">ls <span class="operator">-l</span> <span class="comment">#列出文件详情</span></span><br><span class="line">ls -X <span class="comment">#根据文件扩展名排序</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pwd ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> <span class="comment">#显示当前完整路径</span></span><br><span class="line"><span class="built_in">pwd</span> -P <span class="comment">#显示当前实际路径（区别连接路径）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>find : 查找文件或目录（实时）</p>
</li>
<li>locate : 查看文件或目录（非实时，需要更新索引）</li>
<li><p>cat :显示文件</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> <span class="keyword">file</span> #显示整个文件</span><br><span class="line"><span class="keyword">cat</span> &gt; <span class="keyword">file</span> # 创建新文件</span><br><span class="line"><span class="keyword">cat</span> file1 file2 &gt; file3 #合并文件</span><br><span class="line"><span class="keyword">cat</span> -<span class="keyword">n</span> <span class="keyword">file</span> # 对输出添加行编号</span><br></pre></td></tr></table></figure>
</li>
<li><p>head:显示文件开头</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head file <span class="preprocessor">#显示文件开头<span class="number">10</span>行</span></span><br><span class="line">head -n <span class="number">5</span> file <span class="preprocessor">#显示文件开头<span class="number">5</span>行</span></span><br><span class="line">head -c <span class="number">5</span> file <span class="preprocessor">#显示文件开头<span class="number">5</span>个字节</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>tail: 显示文件末尾</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tail <span class="type">file</span> <span class="comment">#读取末尾10行</span></span><br><span class="line">tail -n <span class="number">5</span> <span class="type">file</span> <span class="comment">#读取末尾5行</span></span><br><span class="line">tail -f <span class="type">file</span> <span class="comment">#循环读取文件末尾，可以用户实时监控log文件</span></span><br><span class="line">tail -f -pid=PID <span class="type">file</span> <span class="comment">#当pid进程终止后，停止</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>diff: 比较文件差异</p>
</li>
<li>chown:</li>
<li>chmod:</li>
<li>重定向：</li>
</ol>
<ul>
<li><blockquote>
<p> 输出重定向到一个文件或设备 覆盖原来的文件</p>
</blockquote>
</li>
<li><blockquote>
<p>! 输出重定向到一个文件或设备 强制覆盖原来的文件</p>
</blockquote>
</li>
<li><blockquote>
<blockquote>
<p>输出重定向到一个文件或设备 追加原来的文件</p>
</blockquote>
</blockquote>
</li>
<li>&lt;  输入重定向到一个程序</li>
</ul>
<ol>
<li>管线命令<br>利用Linux所提供的管道符“|”将两个命令隔开，管道符左边命令的输出就会作为管道符右边命令的输入。连续使用管道意味着第一个命令的输出会作为 第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，</li>
</ol>
<h2 id="文本处理类命令">文本处理类命令</h2><ol>
<li><p>touch ：创建新文件或修改文件时间戳</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch new<span class="class">.txt</span> #创建一个不存在的文件</span><br><span class="line">touch -t timestamp some<span class="class">.txt</span> #修改时间戳</span><br></pre></td></tr></table></figure>
</li>
<li><p>grep ：文本搜索</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> match_patten file <span class="comment"># 默认访问匹配行</span></span><br><span class="line"><span class="keyword">grep</span> <span class="string">"class"</span> . -R -n  <span class="comment">#在多级目录中对文本递归搜索</span></span><br><span class="line"><span class="keyword">grep</span> -e <span class="string">"class"</span> -e <span class="string">"vitural"</span> file <span class="comment">#匹配多个模式:</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>xargs ：</p>
</li>
<li>sort :（待更新）</li>
<li>uniq:</li>
<li>tr :（待更新）</li>
<li>cut :（待更新）</li>
<li>paste :（待更新）</li>
<li>wc :</li>
<li>set :（待更新）</li>
<li>awk :<h2 id="磁盘管理类命令">磁盘管理类命令</h2></li>
<li>du :</li>
<li>tar :<h2 id="进程管理类命令">进程管理类命令</h2></li>
<li><p>ps : 列出进程</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ps</span> -ef <span class="comment">#查询正在运行的进程信息</span></span><br><span class="line">ps -ajx <span class="comment">#以完整的格式显示所有的进程</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>top :显示进程信息，并实时更新<br>输入top命令后，进入到交互界面；接着输入字符命令后显示相应的进程状态：<br>对于进程，平时我们最常想知道的就是哪些进程占用CPU最多，占用内存最多。以下两个命令就可以满足要求:<br>P：根据CPU使用百分比大小进行排序。<br>M：根据驻留内存大小进行排序。<br>i：使top不显示任何闲置或者僵死进程。</p>
</li>
<li><p>lsof : 查看文件打开信息</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:<span class="number">3306</span> <span class="preprocessor">#查看端口占用的进程状态</span></span><br><span class="line">lsof -u username <span class="preprocessor">#查看用户username的进程所打开的文件</span></span><br><span class="line">lsof -c init <span class="preprocessor">#查询init进程当前打开的文件</span></span><br><span class="line">lsof -p <span class="number">23295</span> <span class="preprocessor">#查询指定的进程ID(<span class="number">23295</span>)打开的文件</span></span><br><span class="line">$lsof +d mydir1/ <span class="preprocessor">#查询指定目录下被进程开启的文件（使用+D 递归目录）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>kill :杀死进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> PID <span class="comment">#杀死pid进程</span></span><br><span class="line"><span class="built_in">kill</span> -<span class="number">9</span> <span class="number">3434</span> <span class="comment">#杀死相关进程</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pmap :来输出进程内存的状况，可以用来分析线程堆栈</p>
<h2 id="性能监控类命令">性能监控类命令</h2></li>
<li>sar :</li>
<li>free :</li>
<li>watch :<h2 id="网络类命令">网络类命令</h2></li>
<li><p>netstat :显示各种网络相关信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat <span class="operator">-a</span> <span class="comment">#列出所有端口</span></span><br><span class="line">netstat -at <span class="comment">#列出所有tcp端口</span></span><br><span class="line">netstat <span class="operator">-l</span> <span class="comment">#列出所有监听的服务状态</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>route ：查看路由状态</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">route</span> -n</span><br></pre></td></tr></table></figure>
</li>
<li><p>traceroute :探测前往地址IP的路由路径:</p>
</li>
<li>host :DNS查询<h2 id="ipc资源管理类命令">ipc资源管理类命令</h2></li>
<li>ipcs ：</li>
<li>ulimit ：</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="帮助类命令">帮助类命令</h2><ol>
<li>info：列出命令的详细信息</li>
<li>whatis: 列出命令的简要用途说明</li>
<li>man：（待补充）</li>
</ol>
<h2 id="文件操作类命令">文件操作类命令</h2><ol]]>
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git使用手册]]></title>
    <link href="http://yoursite.com/2016/05/12/git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2016/05/12/git使用手册/</id>
    <published>2016-05-12T13:03:32.000Z</published>
    <updated>2016-05-12T13:03:32.687Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据结构-hash表]]></title>
    <link href="http://yoursite.com/2016/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-hash%E8%A1%A8/"/>
    <id>http://yoursite.com/2016/05/12/数据结构-hash表/</id>
    <published>2016-05-12T11:30:29.000Z</published>
    <updated>2016-05-12T11:30:29.845Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[c++基础-异常处理]]></title>
    <link href="http://yoursite.com/2016/05/12/c++%E5%9F%BA%E7%A1%80-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2016/05/12/c++基础-异常处理/</id>
    <published>2016-05-12T11:29:47.000Z</published>
    <updated>2016-05-12T11:29:47.728Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[c++基础：零散知识点总结]]></title>
    <link href="http://yoursite.com/2016/05/12/c++%E5%9F%BA%E7%A1%80-%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/05/12/c++基础-零散知识点总结/</id>
    <published>2016-05-12T11:21:33.000Z</published>
    <updated>2016-05-12T12:54:05.984Z</updated>
    <content type="html"><![CDATA[<h1 id="c++基础：零散知识点总结">c++基础：零散知识点总结</h1><p>[TOC]</p>
<h2 id="内联函数">内联函数</h2><h3 id="内联函数的使用">内联函数的使用</h3><p>可以通过在<strong>函数定义</strong>前添加inline关键字对函数进行修饰，则该函数为内联函数。所谓内联函数就是它在程序中每个调用点上都内联的展开。这样就可以<strong>避免函数调用的开销</strong>。一般使得一个函数成为一个内联函数有下面两种方式：</p>
<ol>
<li><p>在函数定义前加上inline关键字，例如</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123; <span class="keyword">return</span> a;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在类声明中部分定义的函数默认为内联函数，如</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> a;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="内联函数的原理">内联函数的原理</h3><p>在程序编译阶段，编译器会将程序中出现的内联函数的调用表达式用内联函数的函数体进行替代。但是<strong>编译器在优化内联函数时，必须知道函数定义的内容，这就意味着内联函数的定义和对该函数的调用必须在同一文件中，因此在多文件程序中，每个调用内联函数的文件必须对该函数进行定义</strong>，一般的解决方法就是讲内联函数的定义放在头文件中，并在调用该函数的文件中包含此头文件。</p>
<p><strong>内联函数的替换发生在编译的哪个阶段？</strong></p>
<h3 id="内联函数的Q&amp;A">内联函数的Q&amp;A</h3><ol>
<li><p>内联函数一定会内联展开吗？</p>
<p>答案是否定的。对于内联函数，程序只是提供了一个“内联建议”，即建议编译器把函数用内联展开，但是真正是否内联，是由编译器决定的。有以下几种情况，内联函数可能会不被替换：</p>
<ul>
<li>对于函数体过大的函数，编译器一般不会内联，即使制定为内联函数。</li>
<li>在内联函数内部，不允许用循环语句和开关语句（if或switch）。内联函数内部有循环和开关，也不会出错，但是编译器会把它当做非内联函数的。</li>
<li>关键字inline必须与函数定义体放在一起才能使函数真正内联，仅把inline放在函数声明的前面不起任何作用。因为inline是一种用于实现的关键字，不是一种用于声明的关键字。内联函数的声明是不需要加inline关键字的，内联函数的定义是必须加inline的（除了类的定义部分的默认内联函数），尽管很多书声明定义都加了，要注意理解声明和定义的区别。</li>
</ul>
</li>
<li>内联函数一定要定义在头文件中么？<br>通常情况下内联函数被定义在头文件中。如果内联函数的声明与定义分开。那么需要在调用该内联函数的.c文件中对该内联函数进行定义。否则在编译时会出现链接失败的错误。</li>
<li>内联函数一定要定义在被调用之前么？<br>是的，内联函数的定义必须在第一次调用之前。注意，这里是定义之前，不仅仅是声明之前。对于普通函数，可以在调用之前声明，调用代码之后具体定义（实现函数），但是内联函数要实现内联，必须先定义再调用，否则编译器会把在定义之前调用的内联函数当做普通函数进行调用。<h2 id="constexpr_函数">constexpr 函数</h2>待更新</li>
</ol>
<h2 id="深拷贝">深拷贝</h2><h3 id="什么是深拷贝">什么是深拷贝</h3><h3 id="什么时候需要深拷贝">什么时候需要深拷贝</h3>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="c++基础：零散知识点总结">c++基础：零散知识点总结</h1><p>[TOC]</p>
<h2 id="内联函数">内联函数</h2><h3 id="内联函数的使用">内联函数的使用</h3><p>可以通过在<strong>函数定义</strong>前添加in]]>
    </summary>
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[c++基础-类与继承]]></title>
    <link href="http://yoursite.com/2016/04/26/c++%E5%9F%BA%E7%A1%80-%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2016/04/26/c++基础-类与继承/</id>
    <published>2016-04-26T02:12:46.000Z</published>
    <updated>2016-05-12T13:28:20.058Z</updated>
    <content type="html"><![CDATA[<h1 id="c++基础-类与继承">c++基础-类与继承</h1><h2 id="c++的类">c++的类</h2><h3 id="构造函数">构造函数</h3><p>类通过一个或几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做构造函数。</p>
<h4 id="默认构造函数">默认构造函数</h4><p>当类内没有声明任何构造函数的时候，编译器会自动的生成默认构造函数。这个默认构造函数被称为合成的默认构造函数。<br>合成的默认构造函数按照如下规则初始化类的数据成员：</p>
<ol>
<li><p>如果存在类内的初始值，用它来初始化成员。如</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> example&#123;</span><br><span class="line">  <span class="keyword">int</span> one=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> two=<span class="number">2</span>;</span><br><span class="line">  <span class="comment">//默认构造函数将为one与two分别赋值为1和2.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不存在类内初始值，默认初始化该成员。默认初始化的默认值根据变量的类型决定。对于内置类型而言，它的默认值由定义位置决定。定义与任何函数体之外的变量初始化为0。定义在函数体内部的内置类型将不被初始化。一个未被初始化的内置类型变量的值是未定义的。</p>
</li>
</ol>
<p><strong>注意</strong> <strong><em>如果一个类中包含一个其他类型的成员，而该成员没有默认构造函数，则编译器无法初始化该成员，也无法为该类合成默认的构造函数</em></strong></p>
<h4 id="构造函数初始值列表">构造函数初始值列表</h4><ul>
<li>构造函数初始值列表的使用方式如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> example&#123;</span><br><span class="line">  <span class="keyword">int</span> one;</span><br><span class="line">  <span class="keyword">int</span> two;</span><br><span class="line">  <span class="keyword">int</span> three=<span class="number">3</span>;</span><br><span class="line">  example():one(<span class="number">1</span>),two(<span class="number">2</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>如果某个数据成员在构造函数初始值列表中被忽略，则他以和合成默认构造函数相同的方式隐式的初始化。</li>
<li>构造函数初始值列表的初始化顺序与该成员在类中的声明顺序一致。</li>
<li>最好令构造函数初始值与成员声明顺序一致，而且如果可能的话，。尽量避免使用某些成员初始化其他成员</li>
<li>如果一个构造函数为所有参数都提供了默认实参。则他实际上也定义了默认构造参数。</li>
</ol>
<h4 id="拷贝与赋值">拷贝与赋值</h4><p>如果没有定义拷贝与赋值的操作。编译器将为自动合成默认的版本。但是某些类不能依赖于合成的版本。尤其是在类需要分配类对象之外的资源时。</p>
<h4 id="析构函数">析构函数</h4><p>###类的静态成员</p>
<h2 id="类的继承与派生">类的继承与派生</h2><p>类派生的形式如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">deriver</span>:<span class="typename">public baseA</span>,<span class="typename">public baseB&#123;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="构造函数初始化顺序">构造函数初始化顺序</h3><p>首先初始化基类的部分，然后按照声明的顺序依次初始化派生类的成员。除非特别指出，派生类对象的基类部分会像数据成员一样执行默认初始化。</p>
<h3 id="虚函数">虚函数</h3><p>在c++中，当我们使用基类的引用（或指针）调用一个虚函数时将发生动态绑定。对于虚函数简而言之，如果被设定为虚函数了，则通过父类的函数调用虚函数执行的都是子类中覆盖的虚函数。如果没有设为虚函数。则操作的还是父类中定义的函数。</p>
<h4 id="虚函数的实现原理">虚函数的实现原理</h4><h3 id="多态">多态</h3><h2 id="多重继承">多重继承</h2><h2 id="虚继承">虚继承</h2>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="c++基础-类与继承">c++基础-类与继承</h1><h2 id="c++的类">c++的类</h2><h3 id="构造函数">构造函数</h3><p>类通过一个或几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做构造函数。</p>
<h4 id="默认]]>
    </summary>
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[coding技巧集锦]]></title>
    <link href="http://yoursite.com/2016/04/25/coding%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/04/25/coding技巧总结/</id>
    <published>2016-04-25T04:50:05.000Z</published>
    <updated>2016-04-25T05:32:44.332Z</updated>
    <content type="html"><![CDATA[<h2 id="调用堆栈">调用堆栈</h2><p>调用堆栈最经常被用于存放子程序的返回地址。在调用任何子程序时，主程序都必须暂存子程序运行完毕后应该返回到的地址。因此，如果被调用的子程序还要调用其他的子程序，其自身的返回地址就必须存入调用堆栈，在其自身运行完毕后再行取回。在递归程序中，每一层次递归都必须在调用堆栈上增加一条地址，因此如果程序出现无限递归（或仅仅是过多的递归层次），调用堆栈就会产生堆栈溢出。<br>调用堆栈的主要功能是存放返回地址。除此之外，调用堆栈还用于存放：<br>本地变量：子程序的变量可以存入调用堆栈，这样可以达到不同子程序间变量分离开的作用。<br>参数传递：如果寄存器不足以容纳子程序的参数，可以在调用堆栈上存入参数。<br>环境传递：有些语言（如Pascal与Ada）支持“多层子程序”，即子程序中可以利用主程序的本地变量。这些变量可以通过调用堆栈传入子程序。</p>
<h2 id="堆与栈">堆与栈</h2><h3 id="C/C++的堆栈">C/C++的堆栈</h3><p>一个由C/C++编译的程序占用的内存分为以下几个部分：</p>
<ol>
<li>栈区（stack）— 由编译器自动分配释放 ，存放函数的参数名，局部变量的名等。其操作方式类似于数据结构中的栈。</li>
<li>堆区（heap）— 由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。</li>
<li>静态区（static）—全局变量和局部静态变量的存储是放在一块的。程序结束后由系统释放。</li>
<li>文字常量区—常量字符串就是放在这里的，程序结束后由系统释放 。</li>
<li>程序代码区— 存放函数体的二进制代码。</li>
</ol>
<h3 id="java中的堆栈">java中的堆栈</h3>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="调用堆栈">调用堆栈</h2><p>调用堆栈最经常被用于存放子程序的返回地址。在调用任何子程序时，主程序都必须暂存子程序运行完毕后应该返回到的地址。因此，如果被调用的子程序还要调用其他的子程序，其自身的返回地址就必须存入调用堆栈，在其自身运行完毕后再行取回。在递归]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[手写程序集锦]]></title>
    <link href="http://yoursite.com/2016/04/25/%E6%89%8B%E5%86%99%E7%A8%8B%E5%BA%8F%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2016/04/25/手写程序集锦/</id>
    <published>2016-04-25T04:48:37.000Z</published>
    <updated>2016-04-25T04:48:37.998Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[操作系统基础-进程]]></title>
    <link href="http://yoursite.com/2016/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80-%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/04/25/操作系统基础-进程/</id>
    <published>2016-04-25T02:38:44.000Z</published>
    <updated>2016-04-25T05:10:43.127Z</updated>
    <content type="html"><![CDATA[<h1 id="进程">进程</h1><p>[TOC]</p>
<h2 id="进程的定义">进程的定义</h2><h2 id="进程的调配">进程的调配</h2><h3 id="什么是进程">什么是进程</h3><h3 id="进程与线程的区别">进程与线程的区别</h3><h2 id="进程间的通信">进程间的通信</h2><h3 id="信号量">信号量</h3><h3 id="共享内存">共享内存</h3><h3 id="消息队列">消息队列</h3><h3 id="信号">信号</h3><h3 id="管道">管道</h3><h3 id="套接字">套接字</h3>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="进程">进程</h1><p>[TOC]</p>
<h2 id="进程的定义">进程的定义</h2><h2 id="进程的调配">进程的调配</h2><h3 id="什么是进程">什么是进程</h3><h3 id="进程与线程的区别">进程与线程的区别</h3><h]]>
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="进程" scheme="http://yoursite.com/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[c++基础：关键字与限定符]]></title>
    <link href="http://yoursite.com/2016/04/23/c++%E5%9F%BA%E7%A1%80-%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
    <id>http://yoursite.com/2016/04/23/c++基础-关键字与限定符/</id>
    <published>2016-04-23T10:24:33.000Z</published>
    <updated>2016-05-18T00:52:07.396Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="const_限定符">const 限定符</h2><p>const限定符用于限定一个对象不能发生改变。</p>
<h3 id="const修饰对象">const修饰对象</h3><blockquote>
<ul>
<li>const对象必须被初始化，初始值可以使任意复杂的表达式</li>
<li>const对象只能执行不改变其值得操作</li>
<li>const对象被设定为仅在文件内有效</li>
<li>const对象以及常量对象的引用或者指针只能调用常量成员函数</li>
</ul>
</blockquote>
<h3 id="const修饰类成员函数">const修饰类成员函数</h3><p>const修饰类成员函数相当于把修改隐式this指针的类型，this指针默认情况下是一个指向非常量对象的常量指针。const修饰成员函数之后，this指针的类型被改变为指向常量对象的常量指针。所以const修饰函数无法改变类的成员。</p>
<blockquote>
<ul>
<li>const修饰类成员函数时，表明该函数不能修改类成员，否则编译器会报错</li>
<li><strong>特别值得注意的是当const引用只能调用const方法，否则会编译报错</strong></li>
</ul>
</blockquote>
<h3 id="const修饰引用与指针">const修饰引用与指针</h3><p>详见 <a href="http://bu540402.github.io/2016/04/23/c++%E5%9F%BA%E7%A1%80-%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/" target="_blank" rel="external">c++基础：指针与引</a></p>
<h3 id="const与函数重载">const与函数重载</h3><blockquote>
<ul>
<li>在函数重载中，顶层const（自身是常量的对象：常量对象或者本身是常量的指针）的形参无法与非顶层const的形参区分开来。</li>
<li>在函数重载重，底层 const（常量引用以及指向常量的指针）可以与非常量对象区别从而实现重载</li>
</ul>
</blockquote>
<h2 id="static限定符">static限定符</h2><h2 id="访问说明符">访问说明符</h2><h3 id="public">public</h3><ol>
<li>修饰类成员：可以被1.该类中的函数、2.子类的函数、3.其友元函数访问，也可以由4.该类的对象访问。</li>
<li>公有继承：父类中的protected和public属性不发生改变</li>
</ol>
<h3 id="private">private</h3><ol>
<li>修饰类成员：只能由1.该类中的函数、2.其友元函数访问。不能被任何其他访问，该类的对象也不能访问(除非该对象位于1或者2中)。<strong>private 属性不能够被继承。</strong></li>
<li>私有继承：父类的protected和public属性在子类中变为private</li>
</ol>
<h3 id="protected">protected</h3><ol>
<li>修饰类成员：可以被1.该类中的函数、2.子类的函数、以及3.其友元函数访问(除非该对象位于1或者2中)。但不能被该类的对象访问。</li>
<li>保护性继承：父类的protected和public属性在子类中变为protected</li>
</ol>
<h3 id="深入探讨">深入探讨</h3><p>首先看一个例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	A(<span class="keyword">int</span> i_, <span class="keyword">int</span> j_) &#123;</span><br><span class="line">		i = i_;</span><br><span class="line">		j = j_;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">disp</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt;<span class="string">"disp : "</span>&lt;&lt;endl;;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; a.i &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; a.j &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> B:<span class="keyword">public</span> A&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		B():A(<span class="number">0</span>,<span class="number">1</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> c:<span class="keyword">public</span> A&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		C():A(<span class="number">0</span>,<span class="number">1</span>)&#123;&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">disp</span><span class="params">(A&amp; a)</span> </span>&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt;<span class="string">"disp : "</span>&lt;&lt;endl;;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; a.i &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; a.j &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">	<span class="function">A <span class="title">a1</span><span class="params">(<span class="number">123</span>, <span class="number">456</span>)</span></span>;</span><br><span class="line">	<span class="function">A <span class="title">a2</span><span class="params">(<span class="number">789</span>, <span class="number">543</span>)</span></span>;</span><br><span class="line">	B bb;</span><br><span class="line">	a1.disp(a2);<span class="comment">//正确</span></span><br><span class="line">	a2.disp(a1);<span class="comment">//正确</span></span><br><span class="line">	bb.disp(a1);<span class="comment">//正确</span></span><br><span class="line">	C c;<span class="comment">//类C会编译错误 c，C没有权限访问通过A的对象的privaite以及protected成员</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>类的本质是对数据成员以及进行于其上的一系列操作（成员函数）的一种封装。对象是类的实例化，在内存映射中每个对象仅仅保留属于自己的那份数据成员副本。而成员函数对于整个类是共享的，也就是说一个类只保留一份成员函数。成员函数通过this指针来操作同一个类的不同实例的数据成员。所以简而言之在对于使用实例来访问私有成员或者保护性成员的情况，只有在该实例出现在对应的类的成员函数中时才会出现。<em>待完善</em></p>
<h2 id="友元_friendly">友元 friendly</h2><p>友元函数包括3种：设为友元的普通的非成员函数；设为友元的其他类的成员函数；设为友元类中的所有成员函数。</p>
<h2 id="可变数据成员_mutable">可变数据成员 mutable</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h2 id="const_限定符">const 限定符</h2><p>const限定符用于限定一个对象不能发生改变。</p>
<h3 id="const修饰对象">const修饰对象</h3><blockquote>
<ul>
<li>const对象必]]>
    </summary>
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[c++基础：指针与引用]]></title>
    <link href="http://yoursite.com/2016/04/23/c++%E5%9F%BA%E7%A1%80-%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2016/04/23/c++基础-指针与引用/</id>
    <published>2016-04-23T07:38:36.000Z</published>
    <updated>2016-05-12T11:19:25.349Z</updated>
    <content type="html"><![CDATA[<h1 id="c++基础：指针与引用">c++基础：指针与引用</h1><p>[TOC]</p>
<h2 id="引用">引用</h2><h3 id="引用基础">引用基础</h3><p>普通的引用通常是指左值引用。引用（reference）为对象起了另一个名字，引用类型引用另一种类型。引用类型并非对象，相反的，它只是为一个已经存在的对象所起的另一个名字。定义引用时，程序把引用和他的初始值绑定（bind）在一起。引用是必须会被初始化的，而且不能再将引用绑定在另一个对象上。</p>
<blockquote>
<ol>
<li><strong> 引用并非对象，所以不能定义引用的引用。</strong></li>
<li><strong> 非常量引用只能绑定在对象上，而不能绑定字面指或者表达式结果。</strong></li>
<li><strong>不要返回局部对象的引用或者指针，因为函数完成后他所占用的存储空间也会随之释放，因为局部变量的引用将指向不再有效的内存区域</strong></li>
</ol>
</blockquote>
<h3 id="常量引用">常量引用</h3><p>常量引用是对const的引用。对常量的引用不能被用作修改它所绑定的对象。</p>
<blockquote>
<ol>
<li>非常量引用不能引用一个常量对象</li>
<li>常量引用可以引用常量对象也可以引用普通对象</li>
<li><strong>常量引用可以绑定字面指或者表达式结（因为这些值也是常量）</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下合法</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; refExpression=<span class="number">10</span>*<span class="number">5.012</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h3 id="右值引用">右值引用</h3><p>函数的返回类型决定函数调用是否为左值，调用一个返回引用的函数得到左值，其他类型得到右值。例如可以这样<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> &amp;<span class="title">getVal</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">getVal()=<span class="string">'F'</span>;</span><br></pre></td></tr></table></figure></p>
<p>等待更新</p>
<h2 id="指针">指针</h2><h3 id="指针基础">指针基础</h3><p>指针是用来存储地址的变量。他是指向另一种类型的复合类型。<strong> 指针本身就是一个对象，允许对指针赋值和拷贝。在其声明周期内可以指向不同的对象</strong>。指针无需再定义时赋值，没有被初始化的指针拥有一个不确定的值。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明指针的两种形式</span></span><br><span class="line"><span class="keyword">int</span> *p,*q;</span><br><span class="line"><span class="keyword">int</span>* p;</span><br><span class="line"><span class="keyword">int</span>* q;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<ol>
<li><strong> 初始化所有的指针，未初始化的指针可能会引起程序运行时错误 。</strong></li>
<li><strong> void<em>指针可以存放任意对象的指针但是无法访问其指向的内存空间的内容 。使用static_cast 可以将void</em> 转换成原有的类型指针，如果类型不符合将产生未定义的后果</strong></li>
</ol>
</blockquote>
<h3 id="指针常量">指针常量</h3><p>指针常量是指向常量的指针。不能用于改变其所值得对象的值。常量对象只能用指针常量来指向。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p=&amp;a;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<ol>
<li><strong> 指针常量允许指向一个非常量对象。</strong></li>
<li><strong> 指针常量的指向是可以更改的，可以指向其他帝乡。</strong></li>
</ol>
</blockquote>
<h3 id="常量指针">常量指针</h3><p>指针本身是一个对象，如果指针被声明为常量指针，该指针本身是一个常量，一旦指定一个对象不能再做更改。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p=&amp;a;<span class="comment">//p不能再指向其他对象，可以通过p改变a</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b2=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> q=&amp;b2;<span class="comment">//q本身是指向一个常量的常量指针。不能通过q改变对象，q的指向也不能改变。</span></span><br></pre></td></tr></table></figure></p>
<h3 id="函数指针">函数指针</h3><h2 id="指针与引用的对比">指针与引用的对比</h2><h3 id="顶层const与底层const">顶层const与底层const</h3><p>顶层const 表示指针本身是常量<br>底层const 表示指针所指的对象是常量</p>
<h3 id="指针与引用的优劣">指针与引用的优劣</h3><ul>
<li><em>指针可以为空或者未初始化的状态而引用必须初始化，从这个角度来讲指针比引用更危险。</em></li>
<li><em>通过指针new出来的空间必须delete才能释放掉。可能会造成内存泄漏</em></li>
<li><em>通过引用来传递参数,可以减少对象的复制，增强效率</em></li>
</ul>
<h3 id="指针和引用作为函数参数分别适用于什么情况">指针和引用作为函数参数分别适用于什么情况</h3><h3 id="指向指针的引用">指向指针的引用</h3><p>指针的引用，相当于一个指针。保持和原来指针一样的属性。然后似乎并没有指向引用的指针。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> str=<span class="number">10</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> dataA=<span class="number">10</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span>* dataPrtA=&amp;dataA;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> dataB=<span class="number">20</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span>* dataPrtB=&amp;dataB;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span>* &amp;dataRef=dataPrtA;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;*dataRef&lt;&lt;endl;</span><br><span class="line">	dataRef=dataPrtB;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;*dataRef&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="c++基础：指针与引用">c++基础：指针与引用</h1><p>[TOC]</p>
<h2 id="引用">引用</h2><h3 id="引用基础">引用基础</h3><p>普通的引用通常是指左值引用。引用（reference）为对象起了另一个名字，引用类型引用另]]>
    </summary>
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/11/24/hello-world/"/>
    <id>http://yoursite.com/2015/11/24/hello-world/</id>
    <published>2015-11-24T03:10:45.073Z</published>
    <updated>2015-11-23T05:50:20.088Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[二分搜索总结]]></title>
    <link href="http://yoursite.com/2014/06/11/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2014/06/11/二分搜索总结/</id>
    <published>2014-06-11T08:38:51.000Z</published>
    <updated>2016-04-26T04:40:10.427Z</updated>
    <content type="html"><![CDATA[<p><strong>若 p(x)成立，对于所有的y&gt;x, p(y)都成立。当然，若p(x) 不成立，所有y &lt; x, p(y)都不成立。</strong></p>
<h5 id="使得p（x）成立的第一个满足条件的位置">使得p（x）成立的第一个满足条件的位置</h5><pre config="brush:cpp;toolbar:false;">
int binary_search(int a[], int low, int high)
{
    int mid;
    while (low &lt; high)
    {
        mid = low + (high - low) / 2;
        if (p(mid))
            high = mid;
        else
            low = mid + 1;
        return low;
    }
    if (p(low) == false)
    return -1;
}
</pre>

<h5 id="使得p(x)成立的最后一个满足条件的位置">使得p(x)成立的最后一个满足条件的位置</h5><pre config="brush:cpp;toolbar:false;">
int binary_search(int a[], int low, int high)
{
    int mid;
    while (low &lt; high)
    {
        mid = (high + low+1) / 2;
        if (p(mid))
            low = mid;
        else
            hight= mid - 1;
        return low;
    }
    if (p(low) == false)
    return -1;
}
</pre>

<h5 id="第一个大于等于V">第一个大于等于V</h5><pre config="brush:cpp;toolbar:false;">
int bs(int a[], int l, int h, int v)
{
    int m;
    while (l &lt; h)
    {
        m = (l + h) &gt;&gt; 1;
        if (a[m]&gt;= v)
            h = m;
        else
            l = m + 1;
    }
    if(a[l]&lt;v)return -1;
    return l;
}
</pre>

<h5 id="等于V的第一个">等于V的第一个</h5><pre config="brush:cpp;toolbar:false;">
int bs(int a[], int l, int h, int v)
{
    int m;
    while (l &lt; h)
    {
        m = (l + h) &gt;&gt; 1;
        if (a[m]&gt;= v)
            h = m;
        else
            l = m + 1;
    }
    if(a[l]!=v)return -1;
    return l;
}
</pre>

<h5 id="大于V的第一个">大于V的第一个</h5><pre config="brush:cpp;toolbar:false;">
int bs(int a[], int l, int h, int v)
{
    int m;
    while (l &lt; h)
    {
        m = (l + h) &gt;&gt; 1;
        if (a[m]&gt; v)
            h = m;
        else
            l = m + 1;
    }
    if(a[l]&lt;=v)return -1;
    return l;
}
</pre>

<h5 id="小于等于的最后一个">小于等于的最后一个</h5><pre config="brush:cpp;toolbar:false;">
int bs(int a[], int l, int h, int v)
{
    int m;
    while (l &lt; h)
    {
        m = (l + h+1) &gt;&gt; 1;
        if (a[m]&lt;=v)
            l = m;
        else
            h = m - 1;
    }
    if(a[l]&gt;v)return -1;
    return l;
}
</pre>

<h5 id="小于的最后一个">小于的最后一个</h5><pre config="brush:cpp;toolbar:false;">
int bs(int a[], int l, int h, int v)
{
    int m;
    while (l &lt; h)
    {
        m = (l + h+1) &gt;&gt; 1;
        if (a[m]&lt;v)
            l = m;
        else
            h = m - 1;
    }
    if(a[l]&gt;=v)return -1;
    return l;
}
</pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>若 p(x)成立，对于所有的y&gt;x, p(y)都成立。当然，若p(x) 不成立，所有y &lt; x, p(y)都不成立。</strong></p>
<h5 id="使得p（x）成立的第一个满足条件的位置">使得p（x）成立的第一个满足条件的位置</h]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ural 1613]]></title>
    <link href="http://yoursite.com/2013/10/11/ural-1613/"/>
    <id>http://yoursite.com/2013/10/11/ural-1613/</id>
    <published>2013-10-11T12:22:37.000Z</published>
    <updated>2015-11-25T04:37:58.633Z</updated>
    <content type="html"><![CDATA[<pre config="brush:cpp;toolbar:false;">/*题意：给出n个数，给出q个询问L R V.对于每个询问问L R之间是否存在v
 *解法：把原数组连同下标一起排序。对于每个询问问查询一个第一个大于等于v且下标大于等于L的
 *的数字。若该数字和v相同且下标在LR之间。则为1否则为0.
 * 
 */
#include &lt;functional&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
//#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;iomanip&gt;
#include &lt;numeric&gt;
#include &lt;cstring&gt;
#include &lt;cassert&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;bitset&gt;
#include &lt;queue&gt;
#include &lt;stack&gt;
#include &lt;ctime&gt;
#include &lt;list&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include &lt;math.h&gt;
using namespace std;
struct data
{
        int val;
        int rank;
        bool operator &lt;(const data &amp;d)const
        {
            if (d.val == val)
                return rank &lt; d.rank;
            return val &lt; d.val;
        }

};
vector&lt;data&gt; base;
int main()
{
    freopen("data.in", "r", stdin);
    int n;
    cin &gt;&gt; n;
    for (int i = 1; i &lt;= n; i++)
    {
        data a;
        cin &gt;&gt; a.val;
        a.rank = i;
        base.push_back(a);
    }
    sort(base.begin(), base.end());
    int q;
    cin &gt;&gt; q;
    vector&lt;data&gt;::iterator it;
    for (int i = 0; i &lt; q; i++)
    {
        int x, y, d;
        data a;
        cin &gt;&gt; x &gt;&gt; y &gt;&gt; d;
        a.val = d;
        a.rank = x;
        it = lower_bound(base.begin(), base.end(), a);
        if (it-&gt;val == d &amp;&amp; (it-&gt;rank &gt;= x &amp;&amp; it-&gt;rank &lt;= y))
            cout &lt;&lt; 1;
        else
            cout &lt;&lt; 0;

    }
}</pre>]]></content>
    <summary type="html">
    <![CDATA[<pre config="brush:cpp;toolbar:false;">/*题意：给出n个数，给出q个询问L R V.对于每个询问问L R之间是否存在v
 *解法：把原数组连同下标一起排序。对于每个询问问查询一个第一个大于等于v且下标大于等于L的
 *的数字。若该数字和v相]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ural 1016]]></title>
    <link href="http://yoursite.com/2013/09/10/ural-1016/"/>
    <id>http://yoursite.com/2013/09/10/ural-1016/</id>
    <published>2013-09-10T08:05:22.000Z</published>
    <updated>2016-04-23T11:17:04.680Z</updated>
    <content type="html"><![CDATA[<pre config="brush:cpp;toolbar:false;">/*题意：给出一个骰子，六个面标记数字。放在国际象棋的棋盘里。
 * 没滚动一次，花费着地的那个面标记数字那么多的费用。
 * 给出一个起点与终点。问最小费用是多少。
 * 解法：对于每个点骰子的状态有24种，所以把每个点拆成24种状态。
 * 这样就变成了一个最短路问题。在实现过程中，用map把6个面对应的
 * 数字序列映射成24种状态。两个点之间可转移的状态认为有一条边。
 * 
 */
#include &lt;functional&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;numeric&gt;
#include &lt;cstring&gt;
#include &lt;cassert&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;bitset&gt;
#include &lt;queue&gt;
#include &lt;stack&gt;
#include &lt;math.h&gt;
#include &lt;ctime&gt;
#include &lt;list&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include&lt;time.h&gt;
using namespace std;
#define LL long long
#define inf 0x3fffffff
map&lt;LL, int&gt; mm;
int dist[8][8][24];
bool used[8][8][24];
int path[8][8][24][3];
int dir[4][2] =
{
{ 0, 1 },
{ 0, -1 },
{ -1, 0 },
{ 1, 0 } };
int hash = 0;
struct data
{
        int pane[6];
        LL gethash()
        {
            LL ans = 0;
            for (int i = 0; i &lt; 6; i++)
            {
                ans = ans * 1000 + pane[i];
            }
            return ans;
        }

};
int roll(int dir, data &amp;a, data b)
{
    if (dir == 0)
    {
        a.pane[2] = b.pane[3];
        a.pane[3] = b.pane[4];
        a.pane[4] = b.pane[5];
        a.pane[5] = b.pane[2];
    }
    if (dir == 1)
    {
        a.pane[2] = b.pane[5];
        a.pane[3] = b.pane[2];
        a.pane[4] = b.pane[3];
        a.pane[5] = b.pane[4];
    }
    if (dir == 2)
    {
        a.pane[0] = b.pane[4];
        a.pane[1] = b.pane[2];
        a.pane[2] = b.pane[0];
        a.pane[4] = b.pane[1];
    }
    if (dir == 3)
    {
        a.pane[0] = b.pane[2];
        a.pane[1] = b.pane[4];
        a.pane[2] = b.pane[1];
        a.pane[4] = b.pane[0];
    }
}
int check(int x, int y)
{
    if (x &lt; 0 || y &lt; 0 || x &gt; 7 || y &gt; 7)
        return 0;
    return 1;
}
void spfa(int x, int y, data a)
{
    memset(path, -1, sizeof(path));
    queue&lt;int&gt; q;
    queue&lt;data&gt; dq;
    q.push(x);
    q.push(y);
    memset(used, 0, sizeof(used));
    for (int i = 0; i &lt; 8; i++)
        for (int j = 0; j &lt; 8; j++)
            for (int k = 0; k &lt; 24; k++)
            {
                dist[i][j][k] = inf;
            }
    LL tp = a.gethash();
    if (!mm[tp])
        mm[tp] = hash++;
    used[x][y][mm[tp]] = 1;
    dist[x][y][mm[tp]] = a.pane[4];
    q.push(mm[tp]);
    dq.push(a);
    while (!q.empty())
    {
        int ux, uy, ut;
        ux = q.front();
        q.pop();
        uy = q.front();
        q.pop();
        ut = q.front();
        q.pop();
        data u = dq.front();
        dq.pop();
        used[ux][uy][ut] = 0;
        for (int i = 0; i &lt; 4; i++)
        {
            data v = u;
            roll(i, v, u);
            int vx, vy;
            vx = ux + dir[i][0];
            vy = uy + dir[i][1];
            LL tp = v.gethash();
            if (!mm[tp])
                mm[tp] = hash++;
            int vt = mm[tp];
            if (check(vx, vy))
            {
                if (dist[vx][vy][vt] &gt; dist[ux][uy][ut] + v.pane[4])
                {
                    dist[vx][vy][vt] = dist[ux][uy][ut] + v.pane[4];
                    path[vx][vy][vt][0] = ux;
                    path[vx][vy][vt][1] = uy;
                    path[vx][vy][vt][2] = ut;

                    if (!used[vx][vy][vt])
                    {
                        //cout&lt;&lt;vx&lt;&lt;" "&lt;&lt;vy&lt;&lt;" "&lt;&lt;    dist[vx][vy][vt]&lt;&lt;endl;
                        //cout&lt;&lt;ux&lt;&lt;" "&lt;&lt;uy&lt;&lt;" "&lt;&lt;dist[ux][uy][ut]&lt;&lt;endl;;
                        q.push(vx);
                        q.push(vy);
                        q.push(vt);
                        dq.push(v);
                        used[vx][vy][vt] = 1;
                    }
                }
            }
        }
    }
}
vector&lt;string&gt; res;
void getans(int tx, int ty, int tt)
{
    if (tx == -1 || ty == -1 || tt == -1)
        return;
    string s;
    s.push_back('a' + 7 - ty);
    s.push_back('1' + 7 - tx);
    //cout&lt;&lt;s&lt;&lt;endl;
    getans(path[tx][ty][tt][0], path[tx][ty][tt][1], path[tx][ty][tt][2]);
    res.push_back(s);

}
int main()
{
    freopen("data.in", "r", stdin);
    string s, e;
    cin &gt;&gt; s &gt;&gt; e;
    data a;
    int tx, ty, x, y;
    x = s[0] - 'a';
    y = s[1] - '1';
    tx = e[0] - 'a';
    ty = e[1] - '1';
    for (int i = 0; i &lt; 6; i++)
    {
        cin &gt;&gt; a.pane[i];
    }
    spfa(7 - y, 7 - x, a);
    int ans = inf;
    int pos;
    for (int i = 0; i &lt; 24; i++)
    {
        if (ans &gt; dist[7 - ty][7 - tx][i])
        {
            ans = dist[7 - ty][7 - tx][i];
            pos = i;
        }
    }
    cout &lt;&lt; ans &lt;&lt; endl;
    getans(7 - ty, 7 - tx, pos);
    for (int i = 0; i &lt; res.size(); i++)
    {
        cout &lt;&lt; res[i] &lt;&lt; " ";
    }
    cout &lt;&lt; endl;

}</pre>]]></content>
    <summary type="html">
    <![CDATA[<pre config="brush:cpp;toolbar:false;">/*题意：给出一个骰子，六个面标记数字。放在国际象棋的棋盘里。
 * 没滚动一次，花费着地的那个面标记数字那么多的费用。
 * 给出一个起点与终点。问最小费用是多少。
 * 解法：对于每个点骰子的状态有]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[hdu 4714  Tree2cycle]]></title>
    <link href="http://yoursite.com/2013/09/09/hdu-4714-Tree2cycle/"/>
    <id>http://yoursite.com/2013/09/09/hdu-4714-Tree2cycle/</id>
    <published>2013-09-09T06:06:21.000Z</published>
    <updated>2015-11-25T04:37:58.648Z</updated>
    <content type="html"><![CDATA[<pre config="brush:cpp;toolbar:false;">/*题意：一个一棵树，去掉一条边的代价为1,加上一条边的代价也为1
 * 问用最小的代价使得这个树变成一个收尾相接的圆环。
 * 解法：先使得一棵树变成一条链。则出了首位点其他点的度都为2
 * 对于每个点来说如果其度为d且d&gt;2则需要去点的d-2条边。此时
 * 可以将问题分两种情况假设T(u)是树上以u为节点的子树。
 * 那么砍掉d-2条边时 
 * 情况1：砍掉的边都是与其子树相连的边，则此时形成一个以u为起点的链。如：/ 形状
 * 情况2：砍掉其父亲边，保留两条边与子节点相连。此时形成以u为中间节点的链。如 ^ 形状
 * 那么我们记录每个子树这两种情况下是的在子树中得到一条链的最小费用
 * f[u][1]与f[u][2];
 * 容易可以推知 f[u][2]&lt;=f[u][1]
 * 下面推出状态转移方程：
 * 情况一：若保留一条边与一个子节点相连，对于砍掉的边花费为f[v][1]+2
 * 那么若全部砍掉所有子节，其花费的和为sum。
 * 则f[u][1]=sum-max(f[v][1]+2-f[v][2]);
 * 情况二：此情况要保留两条边。则保留最大值与次大值就好了。
 * ps：该题目点数过多直接深搜为爆栈空间。在杭电上用c++可以加栈过关
 * 现场赛栈空间有限且不能加栈空间，所以需要把深搜改为循环模拟递归用栈来实现
 *
 */
//#pragma comment(linker, "/STACK:1024000000,1024000000")
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;stack&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
using namespace std;
#define vN 1000101
#define vE 100001*2
#define inf 0x3fffffff
struct edge
{
    int v, next;
} e[vN * 2];
int head[vN], used[vN], en = 0;
int dp[vN][2];
void addedge(int x, int y)
{
    e[en].v = y;
    e[en].next = head[x];
    head[x] = en++;
    e[en].v = x;
    e[en].next = head[y];
    head[y] = en++;
}
stack&lt;int&gt; st;
int father[vN];
void dfss(int x)
{
    st.push(x);
    father[x] = 0;
    while (!st.empty())
    {
        int u = st.top();
        if (used[u])
        {
            int fmax = 0, smax = 0;
            int sum = 0;
            for (int i = head[u]; i != -1; i = e[i].next)
            {
                int v = e[i].v;
                if (v == father[u])
                    continue;
                sum += dp[v][1] + 2;
                int temp = dp[v][1] + 2 - dp[v][0];
                if (temp &gt; smax)
                {
                    smax = temp;
                    if (smax &gt; fmax)
                    {
                        int tp = fmax;
                        fmax = smax;
                        smax = tp;
                    }
                }

            }
            dp[u][0] = sum - fmax;
            dp[u][1] = sum - fmax - smax;
            st.pop();
        }
        else
        {
            used[u] = 1;
            for (int i = head[u]; i != -1; i = e[i].next)
            {
                int v = e[i].v;
                if (!used[v])
                {
                    st.push(v);
                    father[v] = u;
                }

            }
        }
    }
}

int main()
{
    //freopen("data.in", "r", stdin);
    int t;
    scanf("%d", &amp;t);
    while (t--)
    {
        en = 0;
        int n;
        scanf("%d", &amp;n);
        memset(used, 0, sizeof(int) * (n + 1));
        memset(dp, 0, sizeof(int) * (n + 1));
        memset(head, -1, sizeof(int) * (n + 1));
        for (int i = 0; i &lt; n - 1; i++)
        {
            int x, y;
            scanf("%d%d", &amp;x, &amp;y);
            addedge(x, y);
        }
        dfss(1);
        printf("%d\n", min(dp[1][0], dp[1][1]) + 1);
    }

}</pre>]]></content>
    <summary type="html">
    <![CDATA[<pre config="brush:cpp;toolbar:false;">/*题意：一个一棵树，去掉一条边的代价为1,加上一条边的代价也为1
 * 问用最小的代价使得这个树变成一个收尾相接的圆环。
 * 解法：先使得一棵树变成一条链。则出了首位点其他点的度都为2
 * 对于每]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ural 1109]]></title>
    <link href="http://yoursite.com/2013/09/06/ural-1109/"/>
    <id>http://yoursite.com/2013/09/06/ural-1109/</id>
    <published>2013-09-06T12:45:27.000Z</published>
    <updated>2015-11-25T04:37:58.633Z</updated>
    <content type="html"><![CDATA[<pre config="brush:cpp;toolbar:false;">/*题意：即将到来的会议A国派出M个代表，B国派出N个代表 (M and N &lt;= 1000)
 * A国的代表编号为1, 2, ..., M ;B国的代表编号为1, 2, ..., N .开会前，
 * 要选择K对代表。每一对代表必须一个是A国的，一个是B国的。A国的成员i与B国的成员j就可结对
 * CEO想建立最少的电话联系。
 * 首行给定M,N,K。以下K行为结对的代表P1,P2。P1是A国的成员，P2是B国的成员。
 * 输出所需的最少电话联系。
 * 解法：最小路径覆盖：顶点数 - 最大匹配数
 * 
 */
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;stack&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
using namespace std;
#define vN 1005
#define vE 100001*2
int map[vN][vN],used[vN],match[vN];
int n,m,k;
int hungary(int x)
{
    for(int i=1;i&lt;=m;i++)
    {
        if(map[x][i]&amp;&amp;!used[i])
        {
            used[i]=1;
            if(match[i]==-1||hungary(match[i]))
            {
                match[i]=x;
                return 1;
            }

        }
    }
    return 0;
}
void inihungary()
{
    for(int i=0;i&lt;=n;i++)
    for(int j=0;j&lt;=m;j++)
    {
        match[j]=-1;
        used[j]=0;
        map[i][j]=0;
    }
}
int sovle()
{
    int res=0;
    for(int i=1;i&lt;=n;i++)
    {
            memset(used,0,sizeof(used));
            res+=hungary(i);
    }
    return res;
}
int main()
{
    //freopen("data.in","r",stdin);

    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;
    inihungary();
    for(int i=0;i&lt;k;i++)
    {
        int x,y;
        cin&gt;&gt;x&gt;&gt;y;
        map[x][y]=1;
    }
    cout&lt;&lt;m+n-sovle()&lt;&lt;endl;
}</pre>]]></content>
    <summary type="html">
    <![CDATA[<pre config="brush:cpp;toolbar:false;">/*题意：即将到来的会议A国派出M个代表，B国派出N个代表 (M and N &lt;= 1000)
 * A国的代表编号为1, 2, ..., M ;B国的代表编号为1, 2, ..., N .开会前]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ural 1208]]></title>
    <link href="http://yoursite.com/2013/09/06/ural-1208/"/>
    <id>http://yoursite.com/2013/09/06/ural-1208/</id>
    <published>2013-09-06T06:41:51.000Z</published>
    <updated>2015-11-25T04:37:58.633Z</updated>
    <content type="html"><![CDATA[<pre config="brush:cpp;toolbar:false;">/* 题意:给出n支acm队伍的名单，这名单中有的队员会重复出现在不同的队伍中。问
 * 能从中挑选出最多少支不出现重复队员的队伍。
 * 解法：求最大独立子集。NP完全的。数据小。暴力搜索。注意一个剪枝。见代码
 */
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;stack&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
using namespace std;
#define vN 10001*2
#define vE 100001*2
#define inf 0x3fffffff
string s[30][3];
int adj[20][20];
int cnt;
int n;
int used[20];
int judge(int x,int y)
{
    for(int i=0;i&lt;3;i++)
    for(int j=0;j&lt;3;j++)
    {
        if(s[x][i]==s[y][j])
        {
            return 1;
        }
    }
    return 0;
}
int dfs(int x,int lev,int used[])
{
    int flag=0;
    int iused[20];
    for(int i=0;i&lt;n;i++){
        iused[i]=used[i];
        if(adj[x][i])iused[i]=1;
    }
    iused[x]=1;
    for(int i=0;i&lt;n;i++)
    {

        if(iused[i])continue;
        iused[i]=1;//x之前的节点都要标记为1不在搜索之前的节点
        dfs(i,lev+1,iused);
        flag=1;
    }
    if(flag==0)
    {
        if(cnt&lt;lev)cnt=lev;
    }
    return 0;
}
int main()
{
    //freopen("data.in", "r", stdin);
    cin &gt;&gt; n;
    for (int i = 0; i &lt;n; i++)
    {
        cin&gt;&gt;s[i][0];
        cin&gt;&gt;s[i][1];
        cin&gt;&gt;s[i][2];
    }
    memset(adj,0,sizeof(adj));
    for(int i=0;i&lt;n;i++)
    {
        for(int j=i+1;j&lt;n;j++)
        {
            if(judge(i,j))
            {
                adj[i][j]=1;
                adj[j][i]=1;
                //cout&lt;&lt;i&lt;&lt;j&lt;&lt;endl;
            }
        }
    }
    cnt=0;
    for(int i=0;i&lt;n;i++)
    {
        memset(used,0,sizeof(used));
        used[i]=1;
        dfs(i,1,used);
    }

    cout&lt;&lt;cnt&lt;&lt;endl;

}</pre>]]></content>
    <summary type="html">
    <![CDATA[<pre config="brush:cpp;toolbar:false;">/* 题意:给出n支acm队伍的名单，这名单中有的队员会重复出现在不同的队伍中。问
 * 能从中挑选出最多少支不出现重复队员的队伍。
 * 解法：求最大独立子集。NP完全的。数据小。暴力搜索。注意一个剪]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ural 1930]]></title>
    <link href="http://yoursite.com/2013/09/06/ural-1930/"/>
    <id>http://yoursite.com/2013/09/06/ural-1930/</id>
    <published>2013-09-06T03:13:55.000Z</published>
    <updated>2015-11-25T04:37:58.633Z</updated>
    <content type="html"><![CDATA[<pre config="brush:cpp;toolbar:false;">/* 题意:给出一个图，有一个起点和终点，现在开车从起点驶向重点，路分为上坡和下坡。
 * 求一条从起点到终点的路径使得上下坡转换的次数最少。;
 * 解法：最短路，spfa。把一点拆成以上坡到达和下坡达到两个点。
 * dist[v][vt]=min(dist[v][vt],dist[u][ut]+(ut!=vt));
 */
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;stack&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
using namespace std;
#define vN 10001*2
#define vE 100001*2
#define inf 0x3fffffff
struct edge
{
    int v, next;
    int c;
} e[vE];
int head[vN], used[vN][2], en;
void addedge(int u, int v, int c)
{
    e[en].v = v;
    e[en].c = c;
    e[en].next = head[u];
    head[u] = en++;
}
int dist[vN][2];
int getv(int ut, int vt)
{
    if (ut == vt)
        return 0;
    return 1;
}
int spfa(int s, int t, int n)
{
    queue&lt;int&gt; q;
    memset(used, 0, sizeof(used));
    for (int i = 0; i &lt;= n; i++)
    {
        dist[i][0] = inf;
        dist[i][1] = inf;
    }
    used[s][0] = 1;
    dist[s][0] = 0;
    dist[s][1] = 0;
    used[s][1] = 1;
    q.push(s);
    q.push(0);
    q.push(s);
    q.push(1);
    while (!q.empty())
    {
        int u = q.front();
        q.pop();
        int ut = q.front();
        q.pop();
        for (int i = head[u]; i != -1; i = e[i].next)
        {
            int v = e[i].v;
            int vt = e[i].c;
            if (dist[v][vt] &gt; dist[u][ut] + getv(ut, vt))
            {
                dist[v][vt] = dist[u][ut] + getv(ut, vt);
                if (!used[v][vt])
                {
                    q.push(v);
                    q.push(vt);
                    used[v][vt] = 1;
                }
            }

        }
    }
    return min(dist[t][0],dist[t][1]);
}
int main()
{
    //freopen("data.in", "r", stdin);
    memset(head, -1, sizeof(head));
    en = 0;
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;
    for (int i = 0; i &lt; m; i++)
    {
        int x, y;
        cin &gt;&gt; x &gt;&gt; y;
        addedge(x, y, 0);
        addedge(y, x, 1);
    }
    int s, t;
    cin &gt;&gt; s &gt;&gt; t;
    cout &lt;&lt; spfa(s, t, n) &lt;&lt; endl;

}</pre>]]></content>
    <summary type="html">
    <![CDATA[<pre config="brush:cpp;toolbar:false;">/* 题意:给出一个图，有一个起点和终点，现在开车从起点驶向重点，路分为上坡和下坡。
 * 求一条从起点到终点的路径使得上下坡转换的次数最少。;
 * 解法：最短路，spfa。把一点拆成以上坡到达和下坡]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ural 1210]]></title>
    <link href="http://yoursite.com/2013/09/05/ural-1210/"/>
    <id>http://yoursite.com/2013/09/05/ural-1210/</id>
    <published>2013-09-05T03:12:33.000Z</published>
    <updated>2015-11-25T04:37:58.648Z</updated>
    <content type="html"><![CDATA[<pre config="brush:cpp;toolbar:false;">/* 题意：给出一颗二叉树的中序遍历和后序遍历，求出其右左中的遍历
 * 解法：一边根据已知的两种序列进行树的dfs同时打印出要求遍历的序列。
 */
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;stack&gt;
#include &lt;cstdio&gt;
using namespace std;
#define vN 30003
int base[2][3005];
stack&lt;int&gt; T;
int n;
int dfs(int root, int pos, int s, int e)
{
    if (T.size() == 0)
    {
        cout &lt;&lt; root &lt;&lt; " ";
        return 0;
    }
    int u = T.top();
    for (int i = pos + 1; i &lt;= e; i++)
    {
        if (base[1][i] == u)
        {
            T.pop();
            dfs(u, i, pos + 1, e);
        }
    }
    if (T.size() == 0)
    {
        cout &lt;&lt; root &lt;&lt; " ";
        return 0;
    }
    u = T.top();
    for (int i = s; i &lt; pos; i++)
    {
        if (base[1][i] == u)
        {
            T.pop();
            dfs(u, i, s, pos - 1);
        }
    }
    cout &lt;&lt; root &lt;&lt; " ";
    return 0;
}
int main()
{
    //freopen("data.in", "r", stdin);
    cin &gt;&gt; n;
    for (int i = 0; i &lt; n; i++)
    {
        cin &gt;&gt; base[0][i];
        T.push(base[0][i]);
        base[1][i] = base[0][i];
    }
    sort(base[1], base[1] + n);
    int u = T.top();
    T.pop();
    int pos;
    for (int i = 0; i &lt; n; i++)
    {
        if (base[1][i] == u)
            pos = i;
    }
    dfs(u, pos, 0, n - 1);
    return 0;
}</pre>]]></content>
    <summary type="html">
    <![CDATA[<pre config="brush:cpp;toolbar:false;">/* 题意：给出一颗二叉树的中序遍历和后序遍历，求出其右左中的遍历
 * 解法：一边根据已知的两种序列进行树的dfs同时打印出要求遍历的序列。
 */
#include &lt;iostream&gt;]]>
    </summary>
    
  </entry>
  
</feed>
